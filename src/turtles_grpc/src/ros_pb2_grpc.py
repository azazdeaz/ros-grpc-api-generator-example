# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ros_pb2 as ros__pb2


class rosoutStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.rosout/Publish',
        request_serializer=ros__pb2.rosgraph_msgs.Log.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.rosout/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.rosgraph_msgs.Log.FromString,
        )


class rosoutServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_rosoutServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.rosgraph_msgs.Log.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.rosgraph_msgs.Log.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.rosout', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class rosout_aggStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.rosout_agg/Publish',
        request_serializer=ros__pb2.rosgraph_msgs.Log.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.rosout_agg/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.rosgraph_msgs.Log.FromString,
        )


class rosout_aggServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_rosout_aggServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.rosgraph_msgs.Log.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.rosgraph_msgs.Log.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.rosout_agg', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class shapes_cancelStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.shapes_cancel/Publish',
        request_serializer=ros__pb2.actionlib_msgs.GoalID.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.shapes_cancel/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.actionlib_msgs.GoalID.FromString,
        )


class shapes_cancelServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_shapes_cancelServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.actionlib_msgs.GoalID.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.actionlib_msgs.GoalID.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.shapes_cancel', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class shapes_feedbackStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.shapes_feedback/Publish',
        request_serializer=ros__pb2.turtle_actionlib.ShapeActionFeedback.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.shapes_feedback/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.turtle_actionlib.ShapeActionFeedback.FromString,
        )


class shapes_feedbackServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_shapes_feedbackServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.turtle_actionlib.ShapeActionFeedback.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.turtle_actionlib.ShapeActionFeedback.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.shapes_feedback', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class shapes_goalStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.shapes_goal/Publish',
        request_serializer=ros__pb2.turtle_actionlib.ShapeActionGoal.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.shapes_goal/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.turtle_actionlib.ShapeActionGoal.FromString,
        )


class shapes_goalServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_shapes_goalServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.turtle_actionlib.ShapeActionGoal.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.turtle_actionlib.ShapeActionGoal.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.shapes_goal', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class shapes_resultStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.shapes_result/Publish',
        request_serializer=ros__pb2.turtle_actionlib.ShapeActionResult.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.shapes_result/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.turtle_actionlib.ShapeActionResult.FromString,
        )


class shapes_resultServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_shapes_resultServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.turtle_actionlib.ShapeActionResult.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.turtle_actionlib.ShapeActionResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.shapes_result', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class shapes_statusStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.shapes_status/Publish',
        request_serializer=ros__pb2.actionlib_msgs.GoalStatusArray.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.shapes_status/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.actionlib_msgs.GoalStatusArray.FromString,
        )


class shapes_statusServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_shapes_statusServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.actionlib_msgs.GoalStatusArray.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.actionlib_msgs.GoalStatusArray.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.shapes_status', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class turtle1_cmd_velStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.turtle1_cmd_vel/Publish',
        request_serializer=ros__pb2.geometry_msgs.Twist.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.turtle1_cmd_vel/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.geometry_msgs.Twist.FromString,
        )


class turtle1_cmd_velServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_turtle1_cmd_velServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.geometry_msgs.Twist.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.geometry_msgs.Twist.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.turtle1_cmd_vel', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class turtle1_color_sensorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.turtle1_color_sensor/Publish',
        request_serializer=ros__pb2.turtlesim.Color.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.turtle1_color_sensor/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.turtlesim.Color.FromString,
        )


class turtle1_color_sensorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_turtle1_color_sensorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.turtlesim.Color.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.turtlesim.Color.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.turtle1_color_sensor', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class turtle1_poseStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/ros.turtle1_pose/Publish',
        request_serializer=ros__pb2.turtlesim.Pose.SerializeToString,
        response_deserializer=ros__pb2.Empty.FromString,
        )
    self.Subscribe = channel.unary_stream(
        '/ros.turtle1_pose/Subscribe',
        request_serializer=ros__pb2.Empty.SerializeToString,
        response_deserializer=ros__pb2.turtlesim.Pose.FromString,
        )


class turtle1_poseServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_turtle1_poseServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=ros__pb2.turtlesim.Pose.FromString,
          response_serializer=ros__pb2.Empty.SerializeToString,
      ),
      'Subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ros__pb2.Empty.FromString,
          response_serializer=ros__pb2.turtlesim.Pose.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.turtle1_pose', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class clearStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.clear/Call',
        request_serializer=ros__pb2.std_srvs.EmptyRequest.SerializeToString,
        response_deserializer=ros__pb2.std_srvs.EmptyResponse.FromString,
        )


class clearServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_clearServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.std_srvs.EmptyRequest.FromString,
          response_serializer=ros__pb2.std_srvs.EmptyResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.clear', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class killStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.kill/Call',
        request_serializer=ros__pb2.turtlesim.KillRequest.SerializeToString,
        response_deserializer=ros__pb2.turtlesim.KillResponse.FromString,
        )


class killServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_killServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.turtlesim.KillRequest.FromString,
          response_serializer=ros__pb2.turtlesim.KillResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.kill', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class resetStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.reset/Call',
        request_serializer=ros__pb2.std_srvs.EmptyRequest.SerializeToString,
        response_deserializer=ros__pb2.std_srvs.EmptyResponse.FromString,
        )


class resetServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_resetServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.std_srvs.EmptyRequest.FromString,
          response_serializer=ros__pb2.std_srvs.EmptyResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.reset', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class rosout_get_loggersStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.rosout_get_loggers/Call',
        request_serializer=ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
        response_deserializer=ros__pb2.roscpp.GetLoggersResponse.FromString,
        )


class rosout_get_loggersServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_rosout_get_loggersServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.roscpp.GetLoggersRequest.FromString,
          response_serializer=ros__pb2.roscpp.GetLoggersResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.rosout_get_loggers', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class rosout_set_logger_levelStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.rosout_set_logger_level/Call',
        request_serializer=ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
        response_deserializer=ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
        )


class rosout_set_logger_levelServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_rosout_set_logger_levelServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.roscpp.SetLoggerLevelRequest.FromString,
          response_serializer=ros__pb2.roscpp.SetLoggerLevelResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.rosout_set_logger_level', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class shapes_get_loggersStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.shapes_get_loggers/Call',
        request_serializer=ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
        response_deserializer=ros__pb2.roscpp.GetLoggersResponse.FromString,
        )


class shapes_get_loggersServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_shapes_get_loggersServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.roscpp.GetLoggersRequest.FromString,
          response_serializer=ros__pb2.roscpp.GetLoggersResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.shapes_get_loggers', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class shapes_set_logger_levelStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.shapes_set_logger_level/Call',
        request_serializer=ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
        response_deserializer=ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
        )


class shapes_set_logger_levelServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_shapes_set_logger_levelServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.roscpp.SetLoggerLevelRequest.FromString,
          response_serializer=ros__pb2.roscpp.SetLoggerLevelResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.shapes_set_logger_level', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class sim_get_loggersStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.sim_get_loggers/Call',
        request_serializer=ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
        response_deserializer=ros__pb2.roscpp.GetLoggersResponse.FromString,
        )


class sim_get_loggersServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_sim_get_loggersServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.roscpp.GetLoggersRequest.FromString,
          response_serializer=ros__pb2.roscpp.GetLoggersResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.sim_get_loggers', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class sim_set_logger_levelStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.sim_set_logger_level/Call',
        request_serializer=ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
        response_deserializer=ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
        )


class sim_set_logger_levelServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_sim_set_logger_levelServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.roscpp.SetLoggerLevelRequest.FromString,
          response_serializer=ros__pb2.roscpp.SetLoggerLevelResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.sim_set_logger_level', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class spawnStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.spawn/Call',
        request_serializer=ros__pb2.turtlesim.SpawnRequest.SerializeToString,
        response_deserializer=ros__pb2.turtlesim.SpawnResponse.FromString,
        )


class spawnServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_spawnServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.turtlesim.SpawnRequest.FromString,
          response_serializer=ros__pb2.turtlesim.SpawnResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.spawn', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class turtle1_set_penStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.turtle1_set_pen/Call',
        request_serializer=ros__pb2.turtlesim.SetPenRequest.SerializeToString,
        response_deserializer=ros__pb2.turtlesim.SetPenResponse.FromString,
        )


class turtle1_set_penServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_turtle1_set_penServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.turtlesim.SetPenRequest.FromString,
          response_serializer=ros__pb2.turtlesim.SetPenResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.turtle1_set_pen', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class turtle1_teleport_absoluteStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.turtle1_teleport_absolute/Call',
        request_serializer=ros__pb2.turtlesim.TeleportAbsoluteRequest.SerializeToString,
        response_deserializer=ros__pb2.turtlesim.TeleportAbsoluteResponse.FromString,
        )


class turtle1_teleport_absoluteServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_turtle1_teleport_absoluteServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.turtlesim.TeleportAbsoluteRequest.FromString,
          response_serializer=ros__pb2.turtlesim.TeleportAbsoluteResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.turtle1_teleport_absolute', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class turtle1_teleport_relativeStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Call = channel.unary_unary(
        '/ros.turtle1_teleport_relative/Call',
        request_serializer=ros__pb2.turtlesim.TeleportRelativeRequest.SerializeToString,
        response_deserializer=ros__pb2.turtlesim.TeleportRelativeResponse.FromString,
        )


class turtle1_teleport_relativeServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Call(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_turtle1_teleport_relativeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Call': grpc.unary_unary_rpc_method_handler(
          servicer.Call,
          request_deserializer=ros__pb2.turtlesim.TeleportRelativeRequest.FromString,
          response_serializer=ros__pb2.turtlesim.TeleportRelativeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ros.turtle1_teleport_relative', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
